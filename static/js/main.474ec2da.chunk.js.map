{"version":3,"sources":["table.js","search.js","App.js","serviceWorker.js","index.js"],"names":["Table","data","ShowData","map","ele","key","id","className","name","username","email","address","city","phone","SearchBar","useState","setStatus","setData","doNotMutate","setOriginal","useEffect","a","fetch","then","response","json","catch","error","alert","fetchData","onChange","event","preventDefault","filtered","filter","el","isNaN","target","value","toLowerCase","includes","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"0OAEO,SAASA,EAAT,GAA0B,IAATC,EAAQ,EAARA,KAEhBC,GADYD,GAAc,IACLE,KAAI,SAAAC,GAC7B,OACE,yBAAKC,IAAKD,EAAIE,GAAIC,UAAU,SAC3B,yBAAKA,UAAU,QAAQH,EAAII,MAC3B,yBAAKD,UAAU,QAAQH,EAAIK,UAC3B,yBAAKF,UAAU,QAAQH,EAAIM,OAC3B,yBAAKH,UAAU,QAAQH,EAAIO,QAAQC,MACnC,yBAAKL,UAAU,QAAQH,EAAIS,WAIhC,OACE,yBAAKN,UAAU,mBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,QAAf,QACA,yBAAKA,UAAU,QAAf,aACA,yBAAKA,UAAU,QAAf,SACA,yBAAKA,UAAU,QAAf,QACA,yBAAKA,UAAU,QAAf,UAEDL,GCrBA,SAASY,IAAa,IAAD,EACEC,mBAAS,QADX,mBACXC,GADW,aAEFD,qBAFE,mBAEnBd,EAFmB,KAEbgB,EAFa,OAGSF,qBAHT,mBAGnBG,EAHmB,KAGNC,EAHM,KAK1BC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,6DAChBL,EAAU,YADM,SAEVM,MAAM,8CACTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAtB,GACJgB,EAAQhB,GACRkB,EAAYlB,MAEbsB,MAAK,kBAAMP,EAAU,cACrBU,OAAM,SAAAC,GAAK,OAAIC,MAAMD,MATR,2CAAH,qDAWfE,KACC,IAoBH,OACE,6BACE,yBAAKtB,UAAU,gBAAf,UACA,2BAAOuB,SArBI,SAACC,GACdA,EAAMC,iBAEN,IAAMC,EAAWhC,EAAKiC,QAAO,SAACC,GAC5B,OAAIC,MAAML,EAAMM,OAAOC,OAGdH,EAAG3B,KAAK+B,cAAcC,SAAST,EAAMM,OAAOC,MAAMC,eAFlDJ,EAAGtB,MAAM0B,cAAcC,SAAST,EAAMM,OAAOC,MAAMC,kBAMrC,KAAvBR,EAAMM,OAAOC,MACfrB,EAAQC,GAERD,EAAQgB,IAOmBQ,KAAK,QAAQlC,UAAU,iBAChD,kBAACP,EAAD,CAAOC,KAAMA,K,MC/BJyC,MAVf,WACE,OACE,yBAAKnC,UAAU,OACb,yBAAKA,UAAU,oBACf,kBAACO,EAAD,SCIc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.474ec2da.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport function Table({ data }) {\n  const tableData = data ? data : [];\n  const ShowData = tableData.map(ele => {\n    return (\n      <div key={ele.id} className='Table'>\n       <div className='cell'>{ele.name}</div>\n       <div className='cell'>{ele.username}</div>\n       <div className='cell'>{ele.email}</div>\n       <div className='cell'>{ele.address.city}</div>\n       <div className='cell'>{ele.phone}</div>\n      </div>\n    );\n  });\n  return (\n    <div className='Table-Container'>\n      <div className='Table-header'>\n        <div className='cell'>Name</div>\n        <div className='cell'>User Name</div>\n        <div className='cell'>Email</div>\n        <div className='cell'>City</div>\n        <div className='cell'>Phone</div>\n      </div>\n      {ShowData}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Table } from './table';\n\nexport function SearchBar() {\n  const [status, setStatus] = useState('idle');\n  const [data, setData] = useState();\n  const [doNotMutate, setOriginal] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setStatus('fetching');\n      await fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => {\n          setData(data)\n          setOriginal(data)\n        })\n        .then(() => setStatus('fetched'))\n        .catch(error => alert(error));\n    };\n    fetchData();\n  }, []);\n\n  const search = (event) => {\n    event.preventDefault();\n   \n    const filtered = data.filter((el)=> {\n      if(!isNaN(event.target.value)) {\n        return el.phone.toLowerCase().includes(event.target.value.toLowerCase());\n      } else {\n        return el.name.toLowerCase().includes(event.target.value.toLowerCase());\n      }\n    })\n\n   if(event.target.value === '') {\n    setData(doNotMutate)\n   } else {\n    setData(filtered);\n   }\n  }\n\n  return (\n    <div>\n      <div className='search-label'>Search</div>\n      <input onChange={search} type='input' className='search-input'></input>\n      <Table data={data}/>\n    </div>\n  );\n}\n","import React from 'react';\nimport { SearchBar } from './search';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Search-Container\">\n      <SearchBar/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}